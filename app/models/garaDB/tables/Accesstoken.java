/**
 * This class is generated by jOOQ
 */
package models.garaDB.tables;


import models.garaDB.Gara;
import models.garaDB.Keys;
import models.garaDB.tables.records.AccesstokenRecord;

import java.sql.Timestamp;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.8.0"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Accesstoken extends TableImpl<AccesstokenRecord> {

    private static final long serialVersionUID = -1354957485;

    /**
     * The reference instance of <code>Gara.AccessToken</code>
     */
    public static final Accesstoken ACCESSTOKEN = new Accesstoken();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<AccesstokenRecord> getRecordType() {
        return AccesstokenRecord.class;
    }

    /**
     * The column <code>Gara.AccessToken.ID</code>.
     */
    public final TableField<AccesstokenRecord, Integer> ID = createField("ID", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>Gara.AccessToken.memberID</code>.
     */
    public final TableField<AccesstokenRecord, Integer> MEMBERID = createField("memberID", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>Gara.AccessToken.TIMESTAMP</code>.
     */
    public final TableField<AccesstokenRecord, Timestamp> TIMESTAMP = createField("TIMESTAMP", org.jooq.impl.SQLDataType.TIMESTAMP.nullable(false).defaultValue(org.jooq.impl.DSL.field("CURRENT_TIMESTAMP", org.jooq.impl.SQLDataType.TIMESTAMP)), this, "");

    /**
     * The column <code>Gara.AccessToken.value</code>.
     */
    public final TableField<AccesstokenRecord, String> VALUE = createField("value", org.jooq.impl.SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>Gara.AccessToken.lastUsed</code>.
     */
    public final TableField<AccesstokenRecord, Timestamp> LASTUSED = createField("lastUsed", org.jooq.impl.SQLDataType.TIMESTAMP.nullable(false).defaultValue(org.jooq.impl.DSL.field("0000-00-00 00:00:00", org.jooq.impl.SQLDataType.TIMESTAMP)), this, "");

    /**
     * The column <code>Gara.AccessToken.ip</code>.
     */
    public final TableField<AccesstokenRecord, String> IP = createField("ip", org.jooq.impl.SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>Gara.AccessToken.browser</code>.
     */
    public final TableField<AccesstokenRecord, String> BROWSER = createField("browser", org.jooq.impl.SQLDataType.CLOB.nullable(false), this, "");

    /**
     * Create a <code>Gara.AccessToken</code> table reference
     */
    public Accesstoken() {
        this("AccessToken", null);
    }

    /**
     * Create an aliased <code>Gara.AccessToken</code> table reference
     */
    public Accesstoken(String alias) {
        this(alias, ACCESSTOKEN);
    }

    private Accesstoken(String alias, Table<AccesstokenRecord> aliased) {
        this(alias, aliased, null);
    }

    private Accesstoken(String alias, Table<AccesstokenRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Gara.GARA;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<AccesstokenRecord, Integer> getIdentity() {
        return Keys.IDENTITY_ACCESSTOKEN;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<AccesstokenRecord> getPrimaryKey() {
        return Keys.KEY_ACCESSTOKEN_PRIMARY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<AccesstokenRecord>> getKeys() {
        return Arrays.<UniqueKey<AccesstokenRecord>>asList(Keys.KEY_ACCESSTOKEN_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<ForeignKey<AccesstokenRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<AccesstokenRecord, ?>>asList(Keys.FKACCESSTOKE162691);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Accesstoken as(String alias) {
        return new Accesstoken(alias, this);
    }

    /**
     * Rename this table
     */
    public Accesstoken rename(String name) {
        return new Accesstoken(name, null);
    }
}
