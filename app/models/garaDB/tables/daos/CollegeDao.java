/**
 * This class is generated by jOOQ
 */
package models.garaDB.tables.daos;


import models.garaDB.tables.College;
import models.garaDB.tables.records.CollegeRecord;

import java.util.List;

import javax.annotation.Generated;

import org.jooq.Configuration;
import org.jooq.impl.DAOImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.8.0"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class CollegeDao extends DAOImpl<CollegeRecord, models.garaDB.tables.pojos.College, Integer> {

    /**
     * Create a new CollegeDao without any configuration
     */
    public CollegeDao() {
        super(College.COLLEGE, models.garaDB.tables.pojos.College.class);
    }

    /**
     * Create a new CollegeDao with an attached configuration
     */
    public CollegeDao(Configuration configuration) {
        super(College.COLLEGE, models.garaDB.tables.pojos.College.class, configuration);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    protected Integer getId(models.garaDB.tables.pojos.College object) {
        return object.getId();
    }

    /**
     * Fetch records that have <code>ID IN (values)</code>
     */
    public List<models.garaDB.tables.pojos.College> fetchById(Integer... values) {
        return fetch(College.COLLEGE.ID, values);
    }

    /**
     * Fetch a unique record that has <code>ID = value</code>
     */
    public models.garaDB.tables.pojos.College fetchOneById(Integer value) {
        return fetchOne(College.COLLEGE.ID, value);
    }

    /**
     * Fetch records that have <code>universityID IN (values)</code>
     */
    public List<models.garaDB.tables.pojos.College> fetchByUniversityid(Integer... values) {
        return fetch(College.COLLEGE.UNIVERSITYID, values);
    }

    /**
     * Fetch records that have <code>name IN (values)</code>
     */
    public List<models.garaDB.tables.pojos.College> fetchByName(String... values) {
        return fetch(College.COLLEGE.NAME, values);
    }
}
