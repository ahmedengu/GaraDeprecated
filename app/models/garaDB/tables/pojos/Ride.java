/**
 * This class is generated by jOOQ
 */
package models.garaDB.tables.pojos;


import java.io.Serializable;
import java.sql.Timestamp;

import javax.annotation.Generated;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.Table;
import javax.validation.constraints.NotNull;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.8.0"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
@Entity
@Table(name = "Ride", schema = "Gara")
public class Ride implements Serializable {

    private static final long serialVersionUID = -626788390;

    private Integer   id;
    private Timestamp timestamp;
    private Double    sourcelongitude;
    private Double    sourcelatitude;
    private Double    destinationlongitude;
    private Double    destinationlatitude;
    private Integer   fare;
    private Timestamp starttime;
    private Timestamp endtime;
    private Integer   carid;
    private Integer   accepted;
    private Integer   drivercheck;
    private Integer   passangercheck;

    public Ride() {}

    public Ride(Ride value) {
        this.id = value.id;
        this.timestamp = value.timestamp;
        this.sourcelongitude = value.sourcelongitude;
        this.sourcelatitude = value.sourcelatitude;
        this.destinationlongitude = value.destinationlongitude;
        this.destinationlatitude = value.destinationlatitude;
        this.fare = value.fare;
        this.starttime = value.starttime;
        this.endtime = value.endtime;
        this.carid = value.carid;
        this.accepted = value.accepted;
        this.drivercheck = value.drivercheck;
        this.passangercheck = value.passangercheck;
    }

    public Ride(
        Integer   id,
        Timestamp timestamp,
        Double    sourcelongitude,
        Double    sourcelatitude,
        Double    destinationlongitude,
        Double    destinationlatitude,
        Integer   fare,
        Timestamp starttime,
        Timestamp endtime,
        Integer   carid,
        Integer   accepted,
        Integer   drivercheck,
        Integer   passangercheck
    ) {
        this.id = id;
        this.timestamp = timestamp;
        this.sourcelongitude = sourcelongitude;
        this.sourcelatitude = sourcelatitude;
        this.destinationlongitude = destinationlongitude;
        this.destinationlatitude = destinationlatitude;
        this.fare = fare;
        this.starttime = starttime;
        this.endtime = endtime;
        this.carid = carid;
        this.accepted = accepted;
        this.drivercheck = drivercheck;
        this.passangercheck = passangercheck;
    }

    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    @Column(name = "ID", unique = true, precision = 10)
    public Integer getId() {
        return this.id;
    }

    public void setId(Integer id) {
        this.id = id;
    }

    @Column(name = "TIMESTAMP", nullable = false)
    public Timestamp getTimestamp() {
        return this.timestamp;
    }

    public void setTimestamp(Timestamp timestamp) {
        this.timestamp = timestamp;
    }

    @Column(name = "sourceLongitude", nullable = false, precision = 22)
    @NotNull
    public Double getSourcelongitude() {
        return this.sourcelongitude;
    }

    public void setSourcelongitude(Double sourcelongitude) {
        this.sourcelongitude = sourcelongitude;
    }

    @Column(name = "sourceLatitude", nullable = false, precision = 22)
    @NotNull
    public Double getSourcelatitude() {
        return this.sourcelatitude;
    }

    public void setSourcelatitude(Double sourcelatitude) {
        this.sourcelatitude = sourcelatitude;
    }

    @Column(name = "destinationLongitude", nullable = false, precision = 22)
    @NotNull
    public Double getDestinationlongitude() {
        return this.destinationlongitude;
    }

    public void setDestinationlongitude(Double destinationlongitude) {
        this.destinationlongitude = destinationlongitude;
    }

    @Column(name = "destinationLatitude", nullable = false, precision = 22)
    @NotNull
    public Double getDestinationlatitude() {
        return this.destinationlatitude;
    }

    public void setDestinationlatitude(Double destinationlatitude) {
        this.destinationlatitude = destinationlatitude;
    }

    @Column(name = "fare", precision = 10)
    public Integer getFare() {
        return this.fare;
    }

    public void setFare(Integer fare) {
        this.fare = fare;
    }

    @Column(name = "startTime")
    public Timestamp getStarttime() {
        return this.starttime;
    }

    public void setStarttime(Timestamp starttime) {
        this.starttime = starttime;
    }

    @Column(name = "endTime")
    public Timestamp getEndtime() {
        return this.endtime;
    }

    public void setEndtime(Timestamp endtime) {
        this.endtime = endtime;
    }

    @Column(name = "carID", nullable = false, precision = 10)
    @NotNull
    public Integer getCarid() {
        return this.carid;
    }

    public void setCarid(Integer carid) {
        this.carid = carid;
    }

    @Column(name = "accepted", precision = 10)
    public Integer getAccepted() {
        return this.accepted;
    }

    public void setAccepted(Integer accepted) {
        this.accepted = accepted;
    }

    @Column(name = "driverCheck", precision = 10)
    public Integer getDrivercheck() {
        return this.drivercheck;
    }

    public void setDrivercheck(Integer drivercheck) {
        this.drivercheck = drivercheck;
    }

    @Column(name = "passangerCheck", precision = 10)
    public Integer getPassangercheck() {
        return this.passangercheck;
    }

    public void setPassangercheck(Integer passangercheck) {
        this.passangercheck = passangercheck;
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder("Ride (");

        sb.append(id);
        sb.append(", ").append(timestamp);
        sb.append(", ").append(sourcelongitude);
        sb.append(", ").append(sourcelatitude);
        sb.append(", ").append(destinationlongitude);
        sb.append(", ").append(destinationlatitude);
        sb.append(", ").append(fare);
        sb.append(", ").append(starttime);
        sb.append(", ").append(endtime);
        sb.append(", ").append(carid);
        sb.append(", ").append(accepted);
        sb.append(", ").append(drivercheck);
        sb.append(", ").append(passangercheck);

        sb.append(")");
        return sb.toString();
    }
}
